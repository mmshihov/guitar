# -*- coding: utf-8 -*-

# почему октава делится именно на 12 частей (нот) в равномерно-темперированном строе?
# при этом, формула для частоты i-го звука, если зафиксирована частота нулевого звука $f_0$ будет определяться: 
# $f_i = f_0 \cdot (\sqrt[12]{2})^i$
#
# 12-й звук (звук на 12 ладу гитары) даст частоту вдвое больше базовой $f_0$ (звук на открытой струны):
# $f_12 = f_0$.
#
# похоже, что октаву делят на 12 частей потому, что:
# $f_5 \approx f_0(1-\frac{1}{4})$ - флажолет на 5-м ладу --- третий обертон (четверть струны)
# $f_7 \approx f_0(1-\frac{1}{3})$ - флажолет на 7-м ладу --- второй обертон (треть струны)
# $f_12 \approx f_0(1-\frac{1}{3})$ - флажолет на 12 ладу --- первый обертон (полструны)

# то есть нам нужны отношения длин струн: 3/4 и 2/3, а отношения частот, соответственно, обратные

# пусть октава делится на $N$ частей, тогда

import math

F = 16 # частота базовая, Гц

def f_i(f_0, i, N):
    return f_0 * math.pow(2.0, i/float(N))
    

def test(N, f_0):
    d43min = d32min = abs(2*f_0)
    i43min = i32min = 0
    for i in range(1,N):
        v = f_i(f_0, i, N)
        d43 = abs(v - f_0*4/3.)
        if (d43 < d43min):
            d43min = d43
            i43min = i
        d32 = abs(v - f_0*3/2.)
        if (d32 < d32min):
            d32min = d32
            i32min = i
    return(i43min, d43min, i32min, d32min) 

def testRange(a,b,f_0):        
    for n in range(a,b):
        (i43min, d43min, i32min, d32min) = test(n, f_0)
        print(n, " 4/3: [", i43min, "]", d43min, " 3/2: [", i32min, "]", d32min)

testRange(2,16,F)

# смотрим в табличку и делаем выводы на сколько частей лучше всего делить октаву...
# может быть сомнительный критерий, но... минимальные погрешности именно на 12-ти частях.